#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Advance Ribbon Setup
# Created by Saurabh Kapoor
# saurabhkapoor7199@gmail.com
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


import maya.cmds as mc
import maya.mel as mel

if (mc.window("Rib_Rig",ex=1)==1):
    mc.deleteUI("Rib_Rig")
mc.window("Rib_Rig")
mc.columnLayout(adj=True)
mc.text("Text",l="Ribbon Setup",w=120)
Pre=mc.textField(w=120,tx="Prefix")
Rib_plane=mc.textFieldButtonGrp(l="Surface",bl="Rib_Surface",bc="RibS()",tx="",cw3=(0,120,80))
mc.intField("Int",w=120)
mc.button('Build',w=100,l="Build Ribbon",c='RibBuild("")')
mc.showWindow("Rib_Rig")
def RibS():
    pr=mc.textField(Pre,q=1,tx=1)
    MainRib=mc.ls(sl=1)
    mc.rename(pr+'_main_rib')
    mc.textFieldButtonGrp(Rib_plane,edit=1,tx=pr+'_main_rib')
def RibBuild(fol):
    pr=mc.textField(Pre,q=1,tx=1)
    print pr
    mc.DeleteHistory(pr+'_main_rib')
    insertNo = mc.intField("Int",q=1,v=1)
    val=(1.0/insertNo)/2
    addVal=1.0/insertNo
    u=val
    fol=[]
    cvVal=mc.getAttr(pr+"_main_ribShape.controlPoints[0].xValue")
    print cvVal
    for i in range(1,insertNo+1):
        mc.createNode('follicle')
        mc.pickWalk(d='up')
        mc.rename(pr+"_main_"+str(i)+"_fol")
        y=mc.ls(sl=1)
        mc.connectAttr(pr+'_main_ribShape.local', y[0]+'Shape.inputSurface')
        mc.connectAttr(pr+'_main_ribShape.worldMatrix[0]', y[0]+'Shape.inputWorldMatrix')
        mc.connectAttr(y[0]+'Shape.outRotate', y[0]+'.rotate')
        mc.connectAttr(y[0]+'Shape.outTranslate', y[0]+'.translate')
        mc.setAttr(y[0]+'Shape.parameterV',.5)
        mc.setAttr(y[0]+'Shape.parameterU',u)
        u=u+addVal
        fol.append(pr+"_main_"+str(i)+"_fol")
    foll=mc.select(fol)
    fol_grp=mc.group(n=pr+'_main_fol_grp')
    rib=pr+"_main_rib"
    StrGrp=mc.group(em=1,n=pr+'_stretch_rib_grp')
    TwGrp=mc.group(em=1,n=pr+'_twist_rib_grp')
    SqGrp=mc.group(em=1,n=pr+'_squash_rib_grp')
    SnGrp=mc.group(em=1,n=pr+'_sine_rib_grp')
    MnGrp=mc.group(em=1,n=pr+'_main_rib_grp')
    ExGrp=mc.group(em=1,n=pr+'_Extra_rib_grp')
    drJnt=mc.group(em=1,n=pr+'_drv_jnt_grp')
    drfol=mc.group(em=1,n=pr+'_drv_fol_grp')
    DisGrp=mc.group(em=1,n=pr+'_dist_loc_grp')
    mc.parent(SnGrp,StrGrp,DisGrp,TwGrp,SqGrp,ExGrp)
    mc.parent(drJnt,drfol,StrGrp)
    for i in fol:
        MnCtrl=mc.circle(ch=0,n=i.replace('fol','ctrl'),nr=(1,0,0))
        mc.group(n=i.replace('fol','ctrl_grp'))
        MnCtrlOffGrp=mc.group(n=i.replace('fol','ctrl_offset'))
        MnJnt=mc.joint(n=i.replace('fol','jnt'))
        mc.parent(MnJnt,MnCtrl)
        mc.parent(MnCtrlOffGrp,i)
        mc.setAttr(MnCtrlOffGrp+'.translateX',0)
        mc.setAttr(MnCtrlOffGrp+'.translateY',0)
        mc.setAttr(MnCtrlOffGrp+'.translateZ',0)
    mc.select(str(rib))
    TRib=mc.duplicate(n=pr+'_twist_rib')
    mc.blendShape(TRib,str(rib),n=pr+'_Rib_BS')
    mc.setAttr(pr+'_Rib_BS.'+pr+'_twist_rib',1)
    mc.select(TRib)
    mc.Twist()
    mc.rename(pr+'_Rib_twistHdl')
    mc.setAttr(pr+'_Rib_twistHdl.rotateZ',90)
    mc.select(str(rib))
    #squash rib
    SQRib=mc.duplicate(n=pr+'_Squash_rib')
    mc.setAttr(SQRib[0]+'.translateZ',(cvVal*(-1.0))/10.0)
    #mc.blendShape('Rib_BS',e=1,t=(str(rib),1,WRib[0],1.0),w=(1,1))
    mc.select(SQRib)
    mc.Squash()
    mc.rename(pr+'_Rib_squashHdl')
    mc.setAttr(pr+'_Rib_squashHdl.rotateZ',90)
    mc.createNode('follicle')
    mc.pickWalk(d='up')
    mc.rename(pr+'_rt_main_fol')
    mc.createNode('follicle')
    mc.pickWalk(d='up')
    mc.rename(pr+'_lf_main_fol')
    mc.connectAttr(str(rib)+'Shape.local', pr+'_rt_main_folShape.inputSurface')
    mc.connectAttr(str(rib)+'Shape.worldMatrix[0]', pr+'_rt_main_folShape.inputWorldMatrix')
    mc.connectAttr(pr+'_rt_main_folShape.outRotate', pr+'_rt_main_fol.rotate')
    mc.connectAttr(pr+'_rt_main_folShape.outTranslate', pr+'_rt_main_fol.translate')
    mc.setAttr(pr+'_rt_main_folShape.parameterU',0)
    mc.setAttr(pr+'_rt_main_folShape.parameterV',0.5)
    mc.connectAttr(str(rib)+'Shape.local', pr+'_lf_main_folShape.inputSurface')
    mc.connectAttr(str(rib)+'Shape.worldMatrix[0]', pr+'_lf_main_folShape.inputWorldMatrix')
    mc.connectAttr(pr+'_lf_main_folShape.outRotate', pr+'_lf_main_fol.rotate')
    mc.connectAttr(pr+'_lf_main_folShape.outTranslate', pr+'_lf_main_fol.translate')
    mc.setAttr(pr+'_lf_main_folShape.parameterU',1)
    mc.setAttr(pr+'_lf_main_folShape.parameterV',0.5)
    mc.parent(pr+'_rt_main_fol',pr+'_lf_main_fol',fol_grp)
    EndFol=mc.ls(pr+'_rt_main_fol',pr+'_lf_main_fol')
    mc.select(fol,EndFol)
    allFol=mc.ls(sl=1)
    for i in EndFol:
        MnCtrl=mc.circle(ch=0,n=i.replace('fol','ctrl'),nr=(1,0,0))
        mc.group(n=i.replace('fol','ctrl_grp'))
        MnCtrlOffGrp=mc.group(n=i.replace('fol','ctrl_offset'))
        MnJnt=mc.joint(n=i.replace('fol','jnt'))
        mc.parent(MnJnt,MnCtrl)
        mc.parent(MnCtrlOffGrp,i)
        mc.setAttr(MnCtrlOffGrp+'.translateX',0)
        mc.setAttr(MnCtrlOffGrp+'.translateY',0)
        mc.setAttr(MnCtrlOffGrp+'.translateZ',0)
    for i in allFol:
        mc.createNode('follicle')
        mc.pickWalk(d='up')
        mc.rename(i.replace('main','drv'))
        y=mc.ls(sl=1)
        mc.connectAttr(pr+'_Squash_ribShape.local', y[0]+'Shape.inputSurface')
        mc.connectAttr(pr+'_Squash_ribShape.worldMatrix[0]', y[0]+'Shape.inputWorldMatrix')
        mc.connectAttr(y[0]+'Shape.outRotate', y[0]+'.rotate')
        mc.connectAttr(y[0]+'Shape.outTranslate', y[0]+'.translate')
        mc.connectAttr(i+'Shape.parameterU', y[0]+'Shape.parameterU')
        mc.setAttr(y[0]+'Shape.parameterV',1)
        mc.disconnectAttr(i+'Shape.parameterU', y[0]+'Shape.parameterU')
        #mc.disconnectAttr(i+'Shape.parameterV', y[0]+'Shape.parameterV')
        mc.select(cl=1)
        SqJnt=mc.joint(n=y[0].replace('fol','jnt'))
        mc.delete(mc.parentConstraint(y[0],SqJnt,mo=0))
        mc.parentConstraint(y[0],SqJnt,mo=1)
        SqMd=mc.shadingNode('multiplyDivide',asUtility=1,n=y[0].replace('fol','md'))   
        SqPm=mc.shadingNode('plusMinusAverage',asUtility=1,n=y[0].replace('fol','nd'))
        mc.connectAttr(SqJnt+'.tz',SqMd+'.input1X')
        mc.connectAttr(SqMd+'.outputX',SqPm+'.input1D[0]')
        mc.setAttr(SqMd+'.input2X',-1)
        mc.setAttr(SqPm+'.input1D[1]',1)
        mc.select(i.replace('fol','ctrl_offset'))
        a=mc.ls(sl=1)
        mc.connectAttr(SqPm+'.output1D',a[0]+'.scaleZ')
        mc.connectAttr(SqPm+'.output1D',a[0]+'.scaleY')
    mc.curve(ep=[(0,0,0),(0,1,1)],d=1)
    mc.rename(pr+'_Wire_crv')
    Wire=mc.ls(sl=1)[0]
    rtCl=mc.cluster(Wire+'.cv[0]')
    lfCl=mc.cluster(Wire+'.cv[1]')
    mc.delete(mc.parentConstraint(pr+'_rt_main_fol',rtCl,mo=0))
    mc.delete(mc.parentConstraint(pr+'_lf_main_fol',lfCl,mo=0))
    mc.select(Wire)
    mc.DeleteHistory()
    mc.select(cl=1)
    rtJnt=mc.joint(n=pr+'_rt_strch_jnt')
    mc.group(n=pr+'_rt_strch_jnt_grp')
    rtGrp=mc.group(n=pr+'_rt_strch_jnt_offset')
    mc.select(cl=1)
    lfJnt=mc.joint(n=pr+'_lf_strch_jnt')
    mc.group(n=pr+'_lf_strch_jnt_grp')
    lfGrp=mc.group(n=pr+'_lf_strch_jnt_offset')
    mc.delete(mc.parentConstraint(pr+'_rt_main_fol',rtGrp,mo=0))
    mc.delete(mc.parentConstraint(pr+'_lf_main_fol',lfGrp,mo=0))
    mc.rebuildCurve(Wire,ch=1,d=3,s=2)   
    WireSkn=mc.skinCluster(rtJnt,lfJnt,Wire)
    mc.skinPercent(WireSkn[0],Wire+'.cv[3]',transformValue=[(rtJnt,0.1667)])
    mc.skinPercent(WireSkn[0],Wire+'.cv[1]',transformValue=[(lfJnt,0.1667)])
    Mclu=mc.cluster(Wire+'.cv[1]',Wire+'.cv[2]',Wire+'.cv[3]')
    mc.select(Wire+'.cv[1]',Wire+'.cv[3]')
    mc.percent(Mclu[0],v=0.4)
    M_ctrl=mc.curve(n=pr+'_Mid_ctrl',ep=[(-1, 1,-1) , (-1, 1 ,-1) , (1 ,1, -1) , (1, 1, 1) , (-1, 1 ,1) , (-1 ,-1, 1) , (-1 ,-1, -1) , (-1, 1, -1) , (-1, 1, 1) , (-1 ,-1, 1) ,(1 ,-1 ,1) , (1 ,1, 1) , (1 ,1, -1) , (1 ,-1, -1) , (1, -1, 1) , (1 ,-1, -1) , (-1, -1, -1)] ,k= [0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16],d=1);
    mc.group(n=pr+'_Mid_ctrl_grp')
    M_grp=mc.group(n=pr+'_Mid_ctrl_offset')
    mc.setAttr(pr+'_Mid_ctrl'+'.overrideEnabled',1)
    mc.setAttr(pr+'_Mid_ctrl'+'.overrideColor',17)
    print Mclu[0]
    mc.connectAttr(pr+'_Mid_ctrl.t',Mclu[0]+'Handle.t')
    mc.parent(pr+'*_drv*jnt',drJnt)
    mc.parent(pr+'*_drv*fol',drfol)
    mc.parent(Mclu[0]+'Handle',StrGrp)
    mc.setAttr(Mclu[0]+'Handle.visibility',0)
    mc.select(M_ctrl)
    mc.addAttr(ln='Squash',at='float',h=False,k=True,r=True)
    mc.addAttr(ln='Start_Smooth',at='float',h=False,k=True,r=True)
    mc.addAttr(ln='End_Smooth',at='float',h=False,k=True,r=True)
    mc.addAttr(ln='Vol_Shifter',at='float',h=False,k=True,r=True)
    mc.addAttr(ln='Stretch_Type',at='enum',h=False,k=True,r=True,en='Off:Even')
    mc.addAttr(ln='Vol_Multiplier',at='float',min=-1,h=False,k=True,r=True)
    #mc.addAttr(ln='Path_Ctrl_Vis',at='bool',h=False,k=True,r=True)
    mc.addAttr(ln='Sec_Ctrl_Vis',at='bool',h=False,k=True,r=True)
    mc.addAttr(ln='Sine',at='bool',h=False,k=True,r=True)
    mc.addAttr(ln='Offset',at='float',h=False,k=True,r=True)
    mc.addAttr(ln='DropOff',at='float',h=False,k=True,r=True,hxv=True,hnv=True,max=1,min=-1)
    mc.addAttr(ln='Amplitude',at='float',h=False,k=True,r=True)
    mc.addAttr(ln='Wavelength',at='float',h=False,k=True,r=True)
    mc.addAttr(ln='LowBound',at='float',h=False,k=True,r=True,hxv=True,hnv=True,max=0,min=-10,dv=-3)
    mc.addAttr(ln='HighBound',at='float',h=False,k=True,r=True,hxv=True,hnv=True,max=10,min=0,dv=3)
    #mc.addAttr(ln='Sine_Shift',at='float',h=False,k=True,r=True)
    mc.setAttr(M_ctrl+'.rotateX',lock=True,cb=False,k=0)
    mc.setAttr(M_ctrl+'.rotateY',lock=True,cb=False,k=0)
    mc.setAttr(M_ctrl+'.rotateZ',lock=True,cb=False,k=0)
    mc.setAttr(M_ctrl+'.scaleX',lock=True,cb=False,k=0)
    mc.setAttr(M_ctrl+'.scaleY',lock=True,cb=False,k=0)
    mc.setAttr(M_ctrl+'.scaleZ',lock=True,cb=False,k=0)
    mc.setAttr(M_ctrl+'.visibility',lock=True,cb=False,k=0)
    Sqmd=mc.shadingNode('multiplyDivide',n=pr+'_Sq_md',asUtility=1)
    mc.connectAttr(M_ctrl+'.Squash',Sqmd+'.input1X')
    mc.select('squash1')
    mc.rename(pr+'_squash1')
    mc.connectAttr(Sqmd+'.outputX',pr+'_squash1.factor')
    mc.setAttr(Sqmd+'.input2X',-0.5)
    mc.connectAttr(M_ctrl+'.Start_Smooth',pr+'_squash1.startSmoothness')
    mc.connectAttr(M_ctrl+'.End_Smooth',pr+'_squash1.endSmoothness')
    mc.connectAttr(M_ctrl+'.Vol_Shifter',pr+'_Rib_squashHdl.translateX')
    mc.parent(pr+'_Rib_squashHdl',SQRib,drJnt,drfol,SqGrp)
    mc.setAttr(SqGrp+'.visibility',0)
    rt_ctrl=mc.curve(n=pr+'_Rt_ctrl',ep=[(-1, 1,-1) , (-1, 1 ,-1) , (1 ,1, -1) , (1, 1, 1) , (-1, 1 ,1) , (-1 ,-1, 1) , (-1 ,-1, -1) , (-1, 1, -1) , (-1, 1, 1) , (-1 ,-1, 1) ,(1 ,-1 ,1) , (1 ,1, 1) , (1 ,1, -1) , (1 ,-1, -1) , (1, -1, 1) , (1 ,-1, -1) , (-1, -1, -1)] ,k= [0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16],d=1);
    mc.group(n=pr+'_Rt_ctrl_grp')
    rtgrp=mc.group(n=pr+'_Rt_ctrl_offset')
    mc.setAttr(pr+'_Rt_ctrl'+'.overrideEnabled',1)
    mc.setAttr(pr+'_Rt_ctrl'+'.overrideColor',13)
    lf_ctrl=mc.curve(n=pr+'_Lf_ctrl',ep=[(-1, 1,-1) , (-1, 1 ,-1) , (1 ,1, -1) , (1, 1, 1) , (-1, 1 ,1) , (-1 ,-1, 1) , (-1 ,-1, -1) , (-1, 1, -1) , (-1, 1, 1) , (-1 ,-1, 1) ,(1 ,-1 ,1) , (1 ,1, 1) , (1 ,1, -1) , (1 ,-1, -1) , (1, -1, 1) , (1 ,-1, -1) , (-1, -1, -1)] ,k= [0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16],d=1);
    mc.group(n=pr+'_Lf_ctrl_grp')
    lfgrp=mc.group(n=pr+'_Lf_ctrl_offset')
    mc.setAttr(pr+'_Lf_ctrl'+'.overrideEnabled',1)
    mc.setAttr(pr+'_Lf_ctrl'+'.overrideColor',13)
    mc.delete(mc.parentConstraint(rtJnt,rtgrp,mo=0))
    mc.delete(mc.parentConstraint(lfJnt,lfgrp,mo=0))
    mc.connectAttr(rt_ctrl+'.t',rtJnt+'.t')
    mc.connectAttr(rt_ctrl+'.rotateY',rtJnt+'.rotateY')
    mc.connectAttr(rt_ctrl+'.rotateZ',rtJnt+'.rotateZ')
    mc.connectAttr(lf_ctrl+'.t',lfJnt+'.t')
    mc.connectAttr(lf_ctrl+'.rotateY',lfJnt+'.rotateY')
    mc.connectAttr(lf_ctrl+'.rotateZ',lfJnt+'.rotateZ')
    mc.rename('twist1',pr+'_twist1')
    mc.connectAttr(lf_ctrl+'.rotateX',pr+'_twist1.startAngle')
    mc.connectAttr(rt_ctrl+'.rotateX',pr+'_twist1.endAngle')
    mc.parent(TRib,pr+'_Rib_twistHdl',TwGrp)
    mc.setAttr(TwGrp+'.visibility',0)
    #stretchy rig
    mc.select(Wire)
    mc.arclen(ch=1)
    mc.select('curveInfo1')
    mc.rename(pr+'_crvlen')
    VMulti=mc.shadingNode('plusMinusAverage',asUtility=1,n=pr+'_Vol_multiplier_pm')
    StrMd=mc.shadingNode('multiplyDivide',asUtility=1,n=pr+'_strch_md')
    NtMd=mc.shadingNode('multiplyDivide',asUtility=1,n=pr+'_neutral_md')
    mc.connectAttr(M_ctrl+'.Vol_Multiplier',VMulti+'.input1D[0]')
    mc.setAttr(VMulti+'.input1D[1]',1)
    mc.connectAttr(VMulti+'.output1D',StrMd+'.input2X')
    mc.connectAttr(pr+'_crvlen.arcLength',StrMd+'.input1X')
    mc.connectAttr(StrMd+'.outputX',NtMd+'.input1X')
    mc.connectAttr(StrMd+'.outputX',NtMd+'.input2X')
    mc.disconnectAttr(StrMd+'.outputX',NtMd+'.input2X')
    mc.setAttr(NtMd+'.operation',2)
    ln=len(pr+'_crvlen')
    print ln
    mc.distanceDimension(sp=(0,5,0),ep=(0,0,0))
    mc.delete(mc.pointConstraint(rtJnt,'locator1',mo=0))
    mc.delete(mc.pointConstraint(lfJnt,'locator2',mo=0))
    dist=mc.getAttr('distanceDimensionShape1.distance')
    print dist
    mc.setAttr(NtMd+'.input2X',dist)
    for i in allFol:
        mc.select(i.replace('fol','ctrl_grp'))
        y=mc.ls(sl=1)
        md=mc.shadingNode('multiplyDivide',asUtility=1,n=y[0].replace('ctrl_grp','md'))
        bd=mc.shadingNode('blendColors',asUtility=1,n=y[0].replace('ctrl_grp','bd'))
        mc.setAttr(bd+'.color2R',1)
        mc.connectAttr(NtMd+'.outputX',md+'.input1X')
        mc.setAttr(md+'.operation',3)
        mc.setAttr(md+'.input2X',-0.5)
        mc.connectAttr(md+'.outputX',bd+'.color1.color1R')
        mc.connectAttr(bd+'.outputR',y[0]+'.scaleY')
        mc.connectAttr(bd+'.outputR',y[0]+'.scaleZ')
        mc.setAttr(M_ctrl+'.Stretch_Type',0)
        mc.setAttr(bd+'.blender',0)
        mc.setDrivenKeyframe(bd+'.blender',cd=M_ctrl+'.Stretch_Type')
        mc.setAttr(M_ctrl+'.Stretch_Type',1)
        mc.setAttr(bd+'.blender',1)
        mc.setDrivenKeyframe(bd+'.blender',cd=M_ctrl+'.Stretch_Type')
    mc.select(M_ctrl)
    mc.addAttr(ln='Sine_Shift',at='float',h=False,k=True,r=True,hxv=True,hnv=True,max=dist,min=-dist,)    
    SnRib=mc.duplicate(str(rib),n=pr+'_Sine_rib')
    mc.select(SnRib)
    mc.Sine()
    mc.rename(pr+'_Rib_sineHdl')
    mc.rename('sine1',pr+'_sine1')
    mc.setAttr(pr+'_Rib_sineHdl.rotateZ',90)
    mc.connectAttr(M_ctrl+'.Sine',pr+'_sine1.envelope')
    mc.connectAttr(M_ctrl+'.Offset',pr+'_sine1.offset')    
    mc.connectAttr(M_ctrl+'.DropOff',pr+'_sine1.dropoff')    
    mc.connectAttr(M_ctrl+'.Wavelength',pr+'_sine1.wavelength')    
    mc.connectAttr(M_ctrl+'.Amplitude',pr+'_sine1.amplitude')    
    mc.connectAttr(M_ctrl+'.LowBound',pr+'_sine1.lowBound')
    mc.connectAttr(M_ctrl+'.HighBound',pr+'_sine1.highBound')
    mc.connectAttr(M_ctrl+'.Sine_Shift',pr+'_Rib_sineHdl.tx')
    mc.blendShape(pr+'_Rib_BS',e=1,t=(str(rib),1,SnRib[0],1.0),w=(1,1))
    mc.parent(SnRib, pr+'_Rib_sineHdl',SnGrp)
    mc.setAttr(SnGrp+'.visibility',0)
    print ln
    WrRib=mc.nurbsPlane(n=pr+'_Wrap_rib',u=2,w=dist,lr=0.1,ax=(0,1,0)) 
    WrapSkn=mc.skinCluster(rtJnt,lfJnt,WrRib)
    print WrRib[0]
    mc.skinPercent(WrapSkn[0],WrRib[0]+'.cv[1][0]',WrRib[0]+'.cv[1][1]',WrRib[0]+'.cv[1][2]',WrRib[0]+'.cv[1][3]',transformValue=[(rtJnt,0.8334)])
    mc.skinPercent(WrapSkn[0],WrRib[0]+'.cv[3][0]',WrRib[0]+'.cv[3][1]',WrRib[0]+'.cv[3][2]',WrRib[0]+'.cv[3][3]',transformValue=[(lfJnt,0.8334)])
    mc.skinPercent(WrapSkn[0],WrRib[0]+'.cv[2][0]',WrRib[0]+'.cv[2][1]',WrRib[0]+'.cv[2][2]',WrRib[0]+'.cv[2][3]',transformValue=[(rtJnt,0.5)])
    StrRib=mc.duplicate(str(rib),n=pr+'_Stretch_rib')
    mc.parent(StrRib,WrRib,StrGrp)
    mc.parent(fol_grp,str(rib),MnGrp)
    mc.connectAttr(M_ctrl+'.Sec_Ctrl_Vis',fol_grp+'.visibility')
    mc.setAttr(StrGrp+'.visibility',0)
    mc.select(StrRib[0],WrRib[0])
    mc.CreateWrap()
    mc.blendShape(pr+'_Rib_BS',e=1,t=(str(rib),2,StrRib[0],1.0),w=(2,1))
    mc.select(cl=1)
    WrCl=mc.cluster(WrRib[0]+'.cv[1][0]',WrRib[0]+'.cv[1][1]',WrRib[0]+'.cv[1][2]',WrRib[0]+'.cv[1][3]',WrRib[0]+'.cv[3][0]',WrRib[0]+'.cv[3][1]',WrRib[0]+'.cv[3][2]',WrRib[0]+'.cv[3][3]',WrRib[0]+'.cv[2][0]',WrRib[0]+'.cv[2][1]',WrRib[0]+'.cv[2][2]',WrRib[0]+'.cv[2][3]')
    mc.select(WrRib[0]+'.cv[1][0]',WrRib[0]+'.cv[1][1]',WrRib[0]+'.cv[1][2]',WrRib[0]+'.cv[1][3]',WrRib[0]+'.cv[3][0]',WrRib[0]+'.cv[3][1]',WrRib[0]+'.cv[3][2]',WrRib[0]+'.cv[3][3]')
    mc.percent(WrCl[0],v=0.5)
    mc.connectAttr(pr+'_Mid_ctrl.t',WrCl[0]+'Handle.t')
    mc.parent(WrCl,StrGrp)
    mc.parent(lfGrp,rtGrp,Wire,ExGrp)
    main_ctrl=mc.curve(n=pr+'_Main_ctrl',ep=[(3,0,-3) , (3, 0 ,3) , (-3 ,0, 3) , (-3, 0, -3),(3,0,-3) ] ,k= [0 , 1 , 2 , 3,4 ],d=1);
    mc.group(n=pr+'_Main_ctrl_grp')
    mngrp=mc.group(n=pr+'_Main_ctrl_offset')
    mc.parent(M_grp,rtgrp,lfgrp,str(rib),main_ctrl)
    mc.parent(pr+'_main_rib_grp',ExGrp)
    Rig=mc.group(em=1,n=pr+'_Rig')
    Geo=mc.group(em=1,n=pr+'_Geo')
    Ribbon=mc.group(em=1,n=pr+'_Ribbon')
    mc.parent(ExGrp,mngrp,Rig)
    mc.parent(Rig,Geo,Ribbon)
    mc.setAttr(pr+'_Main_ctrl'+'.overrideEnabled',1)
    mc.setAttr(pr+'_Main_ctrl'+'.overrideColor',18) 
    mc.setAttr(Wire+'.visibility',0)
    mc.setAttr(rtGrp+'.visibility',0)        
    mc.setAttr(lfGrp+'.visibility',0)
    for i in fol:
        mc.scaleConstraint(main_ctrl,i)
    mc.scaleConstraint(main_ctrl,pr+'_lf_main_fol',mo=1)
    mc.scaleConstraint(main_ctrl,pr+'_rt_main_fol',mo=1)
    mc.setAttr(rt_ctrl+'.scaleX',lock=True,cb=False,k=0)
    mc.setAttr(rt_ctrl+'.scaleY',lock=True,cb=False,k=0)
    mc.setAttr(rt_ctrl+'.scaleZ',lock=True,cb=False,k=0)
    mc.setAttr(rt_ctrl+'.visibility',lock=True,cb=False,k=0)
    mc.setAttr(lf_ctrl+'.scaleX',lock=True,cb=False,k=0)
    mc.setAttr(lf_ctrl+'.scaleY',lock=True,cb=False,k=0)
    mc.setAttr(lf_ctrl+'.scaleZ',lock=True,cb=False,k=0)
    mc.setAttr(lf_ctrl+'.visibility',lock=True,cb=False,k=0)
    mc.setAttr(main_ctrl+'.visibility',lock=True,cb=False,k=0)
    mc.parent('locator1','locator2','distanceDimension1',DisGrp)
    mc.delete(DisGrp)
    #mc.setAttr(DisGrp+'.visibility',0)
    mc.pointConstraint(pr+'_Lf_ctrl',pr+'_Rt_ctrl',pr+'_Mid_ctrl_grp',mo=1)
                                            